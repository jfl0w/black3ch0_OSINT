#!/usr/bin/python
#
# Script by Marcus Hutchins
# Tests for HTTP proxy even if HTTP requests return 404 response
# By crafting two HTTP GET requests, one valid and one invalid, and returns the response time
#
# The valid request should trigger a 404 error (page not found), followed by a 400 error from the invalid request.
# Both 404 and 400 pages should have similar response times; however, if we’re dealing with a reverse proxy the timing should differ noticeably. 
# If we're dealing with a proxy, the valid request is forwarded to the origin but the invalid one isn’t, 
# thus the invalid request will get a response much faster than the valid request.
#
# From MalwareBytes article on C2 Botnet hunting: https://www.malwaretech.com/2017/11/investigating-command-and-control-infrastructure-emotet.html
#


import socket
import datetime
import argparse


def time_request(host, request):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
    host = host.split(':')
    s.connect((host[0], int(host[1])))

    time_start = datetime.datetime.now()
    s.send(request)
    s.recv(1024)
    time_end = datetime.datetime.now()

    diff = time_end - time_start
    return diff.total_seconds() * 1000


parser = argparse.ArgumentParser()
parser.add_argument('--host', help="host (ip:port)", required=True)
args = parser.parse_args()

valid_request = 'GET /aaaaaaaa HTTP/1.1\r\nHost: {}\r\n\r\n'.format(args.host)
invalid_request = 'GET /aaaaaaaa HTTP/1.1\r\nMost: {}\r\n\r\n'.format(args.host)

valid_time = time_request(args.host, valid_request)
invalid_time = time_request(args.host, invalid_request)

print('valid request took {} ms\ninvalid request took {} ms'.format(valid_time, invalid_time))
